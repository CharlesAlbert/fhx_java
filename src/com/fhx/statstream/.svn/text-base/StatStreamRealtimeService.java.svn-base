package com.fhx.statstream;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.marketcetera.marketdata.interactivebrokers.LatestMarketData;
import org.rosuda.REngine.REXP;
import org.rosuda.REngine.REXPMismatchException;
import org.rosuda.REngine.REngineException;
import org.rosuda.REngine.RList;
import org.rosuda.REngine.Rserve.RserveException;

public class StatStreamRealtimeService extends StatStreamServiceBase {

	private static Logger log = Logger
			.getLogger(StatStreamRealtimeService.class);

	public StatStreamRealtimeService() {
		super.init();
	}

	@Override
	public boolean tick(Map<String, List<LatestMarketData>> aTick) {
		RList bwList = getBasicWindowRList(aTick);
		log.info("RList getBasicWindowRList: " + bwList);

		try {
			conn.assign("newBW", REXP.createDataFrame(bwList));

			// this is nice!!!
			// String nas =
			// conn.eval("paste(capture.output(print(curBW)),collapse='\\n')").asString();
			// System.out.println(nas);

			// make sure all global variables that func needs exist
			REXP cmd_ls_vars;

			cmd_ls_vars = conn.parseAndEval("ls()");

			System.out.println("cmd_ls_vars(debug): "
					+ cmd_ls_vars.toDebugString());

			// call func to compute digest for each bw
			System.out.println("haha: " + new Date());
			// String corrFunc = "corr_report <- process_sliding_window2(1)";
			String corrFunc = "corr_report <- process_sliding_window(newBW)";
			RList m;

			m = conn.parseAndEval(corrFunc).asList();

			log.info("" + m.toString());
			System.out.println("hehe: " + new Date());

			log.info("streamId1,streamId2,BeginTimePoint,EndTimePoint,GridDist,CorrCoef");
			int[] streamId1 = m.at(0).asIntegers();
			int[] streamId2 = m.at(1).asIntegers();
			double[] beginTimePt = m.at(2).asDoubles();
			double[] endTimePt = m.at(3).asDoubles();
			double[] gridDist = m.at(4).asDoubles();
			double[] corrCoefs = m.at(5).asDoubles();

			for (int j = 0; j < corrCoefs.length; j++) {
				log.info(streamId1[j] + "," + streamId2[j] + ","
						+ beginTimePt[j] + "," + endTimePt[j] + ","
						+ gridDist[j] + "," + corrCoefs[j]);
			}

			System.out.println("COOOOOOOOOOOOOOOOL: " + new Date());
		} catch (RserveException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (REngineException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (REXPMismatchException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return true;
	}
}
